<?xml version="1.0" encoding="utf-8"?>
<!--Vivox plugin additions-->
<root xmlns:android="http://schemas.android.com/apk/res/android">


  <!-- init section is always evaluated once per architecture -->
  <init>
    <setBool result="bSupported" value="false"/>
    <isArch arch="armeabi-v7a">
      <setBool result="bSupported" value="true"/>
    </isArch>
    <isArch arch="arm64-v8a">
      <setBool result="bSupported" value="true"/>
    </isArch>
    <isArch arch="x86">
      <setBool result="bSupported" value="true"/>
    </isArch>
    <isArch arch="x86_64">
      <setBool result="bSupported" value="true"/>
    </isArch>
    <if condition="bSupported">
      <false>
        <log text="Unsupported architecture: $S(Architecture)"/>
      </false>
    </if>
  </init>

	<gradleProperties>
		<insert>
		</insert>
	</gradleProperties>

  <prebuildCopies>
	<copyDir src="$S(PluginDir)/Android/java" dst="$S(BuildDir)/src/com/example" />
	<copyDir src="$S(PluginDir)/Android/res" dst="$S(BuildDir)/res" />
  </prebuildCopies>

  <!-- optional additions to proguard -->
  <proguardAdditions>
    <insert>
		-dontwarn androidx.**
      -keep class androidx.** { *; }
      -keep interface androidx.** { *; }
    </insert>
  </proguardAdditions>

  <baseBuildGradleAdditions>
        <insert>
		allprojects 
		{
			def mappings = 
			[
				'android.support.annotation': 'androidx.annotation',
				'android.arch.lifecycle': 'androidx.lifecycle',
				'android.support.v4.app.NotificationCompat': 'androidx.core.app.NotificationCompat',
				'android.support.v4.app.ActivityCompat': 'androidx.core.app.ActivityCompat',
				'android.support.v4.content.ContextCompat': 'androidx.core.content.ContextCompat',
				'android.support.v4.app.NotificationManagerCompat': 'androidx.core.app.NotificationManagerCompat',
				'android.support.v4.content.FileProvider': 'androidx.core.content.FileProvider',
				'android.support.v13.app.FragmentCompat': 'androidx.legacy.app.FragmentCompat',
				'android.arch.lifecycle.Lifecycle': 'androidx.lifecycle.Lifecycle',
				'android.arch.lifecycle.LifecycleObserver': 'androidx.lifecycle.LifecycleObserver',
				'android.arch.lifecycle.OnLifecycleEvent': 'androidx.lifecycle.OnLifecycleEvent',
				'android.arch.lifecycle.ProcessLifecycleOwner': 'androidx.lifecycle.ProcessLifecycleOwner',
			]

			beforeEvaluate 
			{ 
				project -> project.rootProject.projectDir.traverse(type: groovy.io.FileType.FILES, nameFilter: ~/.*\.java$/) 
				{ 
					f ->mappings.each 
					{ 
						entry ->if (f.getText('UTF-8').contains(entry.key)) 
						{
							println "Updating ${entry.key} to ${entry.value} in file ${f}"
							ant.replace(file: f, token: entry.key, value: entry.value)
						}
					}
				}
			}
      
			allprojects 
			{
				repositories 
					{
						repositories 
						{
							flatDir 
							{
							</insert>
							<insertValue value="dirs'$S(AbsPluginDir)/Android/aar'"/>
							<insertNewline/>
							<insert>
							}
						}
					}
			}
		}
        </insert>
  </baseBuildGradleAdditions>

  <buildGradleAdditions>
    <if condition="bSupported">
      <true>
        <insert>
		android 
		{      
			packagingOptions 
			{
				// Allow the compilation process to choose the dependencies for us.
				
				pickFirst "lib/arm64-v8a/libc++_shared.so"
				pickFirst "**"
				exclude 'META-INF/DEPENDENCIES'
				exclude 'META-INF/LICENSE'
				exclude 'META-INF/LICENSE.txt'
				exclude 'META-INF/license.txt'
				exclude 'META-INF/NOTICE'
				exclude 'META-INF/NOTICE.txt'
				exclude 'META-INF/notice.txt'
				exclude 'META-INF/ASL2.0'
				exclude("META-INF/*.kotlin_module") 
			}          
		}
		dependencies 
		{	
			implementation ('com.google.android.gms:play-services-auth:20.7.0')
		}
						
        </insert>
      </true>
    </if>
  </buildGradleAdditions>

  <!-- optional updates applied to AndroidManifest.xml -->
  <androidManifestUpdates>		
  <addElements tag="application">
  </addElements>
			<!--application tools:replace= "android:appComponentFactory"/-->
		<addfeature android:glEsVersion="0x00020000" />
  </androidManifestUpdates>
  <!-- optional additions to the GameActivity imports in GameActivity.java -->

  <gameActivityImportAdditions>
    <insert>
	import com.example.googleonetap.UnrealInterface;
    </insert>
  </gameActivityImportAdditions>

  <gameActivityClassAdditions>
    <insert>
	UnrealInterface  UEGoogleInterface;
	public void AndroidThunkJava_GoogleSubsystem_Init(String clientID)
    {
		Log.debug("AndroidThunkJava_GoogleSubsystem_Init");
		UEGoogleInterface = new UnrealInterface();
		UEGoogleInterface.InitInterface(this,clientID);
    }
    </insert>
  </gameActivityClassAdditions>
  
  <gameActivityOnStartAdditions>
	<insert>  
	</insert>
  </gameActivityOnStartAdditions>

  <gameActivityOnActivityResultAdditions> 
	<insert>  
	if(UEGoogleInterface != null)
	{
		UEGoogleInterface.OnActivityResult(requestCode,resultCode,data);
	}
	</insert>   
  </gameActivityOnActivityResultAdditions>
  
</root>
